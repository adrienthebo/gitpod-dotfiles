#!/usr/bin/env bash

__LIBDIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
source "${__LIBDIR}/autoinit.sh"
source "${__LIBDIR}/colors.sh"
source "${__LIBDIR}/functions.sh"

__AUTOINIT_ASDF="${__LIBDIR}/autoinit.d/autoinit-asdf"


__autoinit_asdf_call() {
    local argv=$@

    if ! "$__AUTOINIT_ASDF" is-installed; then
        __autoinit_warn "autoinit-asdf-plugin: 'asdf' is not installed, triggering installation now"
        "$__AUTOINIT_ASDF" install
    fi

    __autoinit_debug "autoinit-asdf-plugin/call: calling '$__AUTOINIT_ASDF autorun asdf $argv'"

    $__AUTOINIT_ASDF autorun asdf $argv
    rc=$?
    __autoinit_debug "autoinit-asdf-plugin/call: '$__AUTOINIT_ASDF autorun asdf $argv' returned $rc"
    return $rc
}


__autoinit_asdf_plugin_init() {
    local plugin="$1"
    if ! $__AUTOINIT_ASDF is-installed ; then
        echo "echo \"Error: asdf is not installed, cannot init '$plugin'\" 1>&2"
        return 1
    elif ! __autoinit_asdf_call list "$plugin" 1>/dev/null 2>/dev/null; then
        echo "echo \"Error: asdf plugin \'$plugin\' is not installed, cannot init\" 1>&2"
        return 1
    else
        cat - <<EOD
{
    local version="$($__AUTOINIT_ASDF autorun asdf list "$plugin" | tail -n1 | tr -d '[:space:]')"
    $__AUTOINIT_ASDF autorun asdf global "$plugin" "\$version"
    $__AUTOINIT_ASDF autorun asdf reshim "$plugin" "\$version"
}
EOD
    fi
}


__autoinit_asdf_plugin_install() {
    local plugin="$1"

    __autoinit_asdf_call plugin add "$plugin"

    local plugin_version_var="AUTOINIT_${plugin^^}_VERSION"
    plugin_version_var="${plugin_version_var//-/_}"
    local plugin_version="${!plugin_version_var:-latest}"

    __autoinit_debug "autoinit-asdf-plugin/install: resolved plugin version to '${plugin_version}'"

    __autoinit_asdf_call install "$plugin" "$plugin_version"

    if [[ $plugin_version == "latest" ]]; then
        plugin_version="$(__autoinit_asdf_call list "$plugin" | tail -n1 | tr -d '[:space:]')"
    fi

    __autoinit_asdf_call global "$plugin" "$plugin_version"
    __autoinit_asdf_call reshim "$plugin" "$plugin_version"
}


__autoinit_asdf_plugin_is_active() {
    local plugin="$1"

    [[ $(command -v "$plugin") =~ "$ASDF_DIR/shims/$plugin" ]]
    return $?
}


__autoinit_asdf_plugin_is_installed() {
    local plugin="$1"
    local executable="${2:-$plugin}"

    __autoinit_asdf_call where "$plugin" 2>/dev/null 1>/dev/null
    return $?
}


__autoinit_asdf_plugin_is_ready() {
    local plugin="$1"

    if "$__AUTOINIT_ASDF" is-ready && __autoinit_asdf_plugin_is_installed "$plugin" && ! __autoinit_asdf_plugin_is_active "$plugin" && ! command -v "$plugin" 1>/dev/null; then
        return 0
    else
        return 1
    fi
}


__autoinit_asdf_plugin_is_shadowed() {
    local plugin="$1"
    local executable="${2:-$plugin}"

    if ! command -v "$executable" 1>/dev/null; then
        __autoinit_debug "asdf-plugin/is-shadowed ($plugin): executable=$executable, no executable found - not shadowed"
        return 0
    else
       [[ $(which "$executable" | head -n1) =~ "$ASDF_DIR/shims/$executable" ]]
       return $?
    fi
}


__autoinit_asdf_plugin_autoload() {
    local plugin="$1"

    if ! "$__AUTOINIT_ASDF" is-installed; then
        __autoinit_warn "autoinit-asdf-plugin/autoload ($plugin): asdf not present, installing asdf version manager"
        "$__AUTOINIT_ASDF" install
    fi

    if ! __autoinit_asdf_plugin_is_installed "$plugin"; then
        __autoinit_debug "autoinit-asdf-plugin/autoload ($plugin): plugin absent, triggering install"
        __autoinit_asdf_plugin_install "$plugin"
        rc=$?
        if [[ $rc -ne 0 ]]; then
            __autoinit_error "autoinit-asdf-plugin/autoload: cannot autoload $plugin (install returned $rc)" 1>&2
            return $rc
        fi
    else
        __autoinit_debug "autoinit-asdf-plugin/autoload ($plugin): plugin installed, skipping install"
    fi

    if ! __autoinit_asdf_plugin_is_active "$plugin"; then
        eval "$(__autoinit_asdf_plugin_init "$plugin")"
    fi
}

__autoinit_asdf_plugin_autorun() {
    local plugin="$1"
    shift
    local argv="$@"

    __autoinit_asdf_plugin_autoload "$plugin" || return 254

    __autoinit_asdf_call exec $argv

    return $?
}

main() {
    local plugin="$1"
    shift
    local cmd="$1"
    shift
    local argv=($@)

    __autoinit_debug "autoinit-asdf-plugin/main: plugin=$plugin cmd=$cmd argv=$argv"


    case "$cmd" in
        "init")
            __autoinit_asdf_plugin_init "$plugin"
            ;;

        "install")
            __autoinit_asdf_plugin_install "$plugin"
            ;;

        "autorun")
            __autoinit_asdf_plugin_autorun "$plugin" $@
            exit $?
            ;;

        "autoload")
            __autoinit_asdf_plugin_autoload "$plugin"
            ;;

        "is-active")
            __autoinit_asdf_plugin_is_active "$plugin"
            ;;

        "is-installed")
            __autoinit_asdf_plugin_is_installed "$plugin"
            ;;

        "is-ready")
            __autoinit_asdf_plugin_is_ready "$plugin"
            ;;

        "is-shadowed")
            local executable="${argv[0]}"
            __autoinit_asdf_plugin_is_shadowed "$plugin" "$executable"
            ;;

        *)
            __autoinit_error "autoinit-asdf-plugin: Unknown command '$cmd'"
            echo "Usage: $0 PLUGIN [init|install|is-active|is-installed]" 1>&2
            ;;
    esac

}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    # shellcheck disable=SC2068
    main $@
fi