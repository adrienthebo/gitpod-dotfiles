#!/usr/bin/env bash

__LIBDIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
source "${__LIBDIR}/colors.sh"
source "${__LIBDIR}/functions.sh"
source "${__LIBDIR}/autoinit.sh"

__gcloud_init() {
    cat - <<EOD

if command -v asdf 1>/dev/null && asdf which gcloud 1>/dev/null 2>/dev/null; then
    local latest="$(asdf list gcloud | tail -n1 | tr -d '[:space:]')"
    asdf reshim gcloud "$latest"
    unset latest
fi

if command -v gcloud 1>/dev/null; then
    source "$(gcloud info --format='get(config.paths.sdk_root)')/completion.$(basename "$SHELL").inc"
fi
EOD
}


__gcloud_install() {
    asdf plugin add gcloud

    asdf install gcloud latest
    if [[ $? -ne 0 ]]; then
        __autoinit_error "autoinit-gcloud: gcloud installation failed, terminating installation"
        return 1
    fi

    local latest="$(asdf list gcloud | tail -n1 | tr -d '[:space:]')"

    asdf global gcloud "$latest"
    asdf exec gcloud components install gke-gcloud-auth-plugin --quiet

    if ! command -v kubectl 1>/dev/null; then
        asdf exec gcloud components install kubectl --quiet
    fi

    asdf reshim gcloud "$latest"
}


__gcloud_is_active() {
    [[ $(command -v gcloud) = "$ASDF_DIR/shims/gcloud" ]]
    return $?
}


__gcloud_is_installed() {
    asdf list gcloud 2>/dev/null 1>/dev/null
    return $?
}


__gcloud_is_ready() {
    if __gcloud_is_installed && ! __gcloud_is_active && ! command -v gcloud 1>/dev/null; then
        return 0
    else
        return 1
    fi
}


__gcloud_is_shadowed() {
    if ! command -v gcloud 1>/dev/null; then
        return 0
    else
        [[ $(which gcloud) = "$ASDF_DIR/shims/gcloud" ]]
        return $?
    fi
}


__gcloud_autoload() {
    if ! __gcloud_is_installed ; then
        __gcloud_install
        rc=$?
        if [[ $rc -ne 0 ]]; then
            return $rc
        fi
    fi

    if ! __gcloud_is_active ; then
        eval "$(__gcloud_init)"
    fi
}

__gcloud_autorun() {
    ARGV="$@"

    __gcloud_autoload || return 254

    $ARGV
    return $?
}


__gcloud_configure() {
    # gcloud auth login

    if [[ -n $GCP_SVC_CREDENTIALS ]]; then
        local client_email="$(jq -r .client_email <<< $GCP_SVC_CREDENTIALS)"

        if gcloud auth list --format=json | jq -e "any(.account == \"$client_email\")"; then
            echo "$(color green "autoinit-gcloud: service account credentials for '$client_email' already activated, skipping activation")"
        else
            echo "$(color blue "autoinit-gcloud: activating service account credentials ($client_email) from \$GCP_SVC_CREDENTIALS")"

            local current_configuration="$(gcloud config configurations list --format='get(name)' --filter='is_active:true')"
            local current_account="$(gcloud config get core/account --format='get(.)')"

            gcloud config configurations create tmp-svcacct-activation --quiet
            gcloud auth activate-service-account \
                "$(jq -r .client_email <<< $GCP_SVC_CREDENTIALS)" \
                --key-file <(echo $GCP_SVC_CREDENTIALS)

            gcloud config configurations activate "$current_configuration"
            gcloud config configurations delete tmp-svcacct-activation --quiet
            if [[ -n "$current_account" ]]; then
                gcloud config set core/account "$current_account"
            fi
        fi
    fi

    local adc_file="${GOOGLE_APPLICATION_CREDENTIALS:-$HOME/.config/gcloud/application_default_credentials.json}"
    if [[ -n $GCP_ADC_FILE ]]; then
        if ! [[ -f $adc_file ]]; then
            # shellcheck disable=SC2005
            echo "$(color blue "autoinit-gcloud: writing application default credentials to $adc_file")"
            mkdir -p "$(dirname "$adc_file")"
            echo "$GCP_ADC_FILE" > "$adc_file"
        else
            echo "$(color green "autoinit-gcloud: application default credentials already present at $adc_file")"
        fi
    fi

    if gcloud auth list --format=json | jq -e 'length == 0' 1>/dev/null; then
        echo "$(color blue "autoinit-gcloud: no cloudsdk credentials present, starting login")"
        gcloud auth login
    else
        echo "$(color green "autoinit-gcloud: cloudsdk credentials present, no login required")"
    fi
}


__gcloud_describe() {

    cat - <<EOD
Manage gcloud, cloudsdk plugins, and gcloud credentials.

Environment variables:
    - GCP_ADC_FILE="${GCP_ADC_FILE}"
    - GCP_SVC_CREDENTIALS="$(tr "\n" ' ' <<< $GCP_SVC_CREDENTIALS | sed -ne '/[[:alnum:]]/p')"
    - GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS}"
EOD
    for var in $(env | awk -F= '/CLOUDSDK/ { print $1 }'); do
        echo "    - ${var}=\"${!var}\""
    done
}

main() {
    ARG="$1"
    shift
    case "$ARG" in
        "init")
            __gcloud_init
            ;;

        "install")
            __gcloud_install
            ;;

        "is-active")
            __gcloud_is_active
            ;;

        "is-installed")
            __gcloud_is_installed
            ;;

        "is-ready")
            __gcloud_is_ready
            ;;

        "is-shadowed")
            __gcloud_is_shadowed
            ;;

        "autoload")
            __gcloud_autoload
            ;;

        "autorun")
            __gcloud_autorun "$@"
            exit $?
            ;;

        "configure")
            __gcloud_configure
            ;;

        "describe")
            __gcloud_describe
            ;;

        *)
            echo "Usage: $0 [init|install|is-active|is-installed]"
            ;;
    esac

}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    # shellcheck disable=SC2068
    main $@
fi