#!/usr/bin/env bash

__LIBDIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
source "${__LIBDIR}/colors.sh"
source "${__LIBDIR}/functions.sh"
source "${__LIBDIR}/autoinit.sh"

__autoinit_atuin_init() {
    # shellcheck disable=SC2016
    cat - <<EOD
source ~/.bash-preexec.sh
eval "\$(atuin init "\$(basename "\$SHELL")")"
eval "\$(atuin gen-completions --shell "\$(basename "\$SHELL")")"
EOD
}


__autoinit_atuin_install() {
    bash <(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)


    if [[ $(basename "$SHELL") == "bash" ]]; then
        if ! [[ -f $HOME/.bash-preexec.sh ]]; then
            curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh
        fi
    fi

    declare atuin_cachedir="$HOME/.cache/atuin"
    if ! [[ -d $atuin_cachedir ]]; then
        mkdir -p "$atuin_cachedir"
    fi
}


__autoinit_atuin_is_active() {
    __autoinit_atuin_is_installed
}


__autoinit_atuin_is_installed() {
    command -v atuin 1>/dev/null
    return $?
}


__autoinit_atuin_is_ready() {
    if __autoinit_atuin_is_installed && ! __autoinit_atuin_is_active && ! command -v gcloud 1>/dev/null; then
        return 0
    else
        return 1
    fi
}


__autoinit_atuin_is_shadowed() {
    return 0
}


__autoinit_atuin_autoload() {
    if ! __autoinit_atuin_is_installed ; then
        __autoinit_atuin_install
        rc=$?
        if [[ $rc -ne 0 ]]; then
            return $rc
        fi
    fi

    if ! __autoinit_atuin_is_active ; then
        # Huh. On autoload we need to initialize shell completions which
        # means sending information back to the originating shell process.
        # Looks like precmd/preexec hooks will be needed to make this seamless.
        eval "$(__autoinit_atuin_init)"
    fi

    if [[ -n $AUTOINIT_ATUIN_AUTOCONFIGURE ]]; then
        __autoinit_atuin_configure
    fi
}

__autoinit_atuin_autorun() {
    ARGV="$@"

    __autoinit_atuin_autoload || return 254

    $ARGV
    return $?
}


__autoinit_atuin_configure() {

    local xdg_config_home="${XDG_CONFIG_HOME:-"$HOME/.config"}"
    local atuin_config_home="${xdg_config_home}/atuin"
    mkdir -p "$atuin_config_home"
    if [[ -f "${atuin_config_home}/config.toml" ]] && [[ -n $AUTOINIT_NO_OVERWRITE_CONFIG ]]; then
        __autoinit_debug "autoinit-atuin/configure: not overwriting atuin config.yaml"
    else
        cat > "$HOME/.config/atuin/config.toml" <<CONFIG
auto_sync = true
sync_frequency = "5m"
search_mode = "fuzzy"
CONFIG
    fi

    if [[ -n $ATUIN_USERNAME ]] && [[ -n $ATUIN_PASSWORD ]] && [[ -n $ATUIN_KEY ]]; then
        local atuin_session="~/.local/share/atuin/session"
        if [[ -f $atuin_session ]]; then
            __autoinit_log "$(color green "autoinit-atuin: already logged in to atuin server")"
        else
            atuin login -u "$ATUIN_USERNAME" -p "$ATUIN_PASSWORD" -k "$ATUIN_KEY"
        fi
    else
        __autoinit_warn "autoinit-atuin cannot login, missing one of [ATUIN_USERNAME, ATUIN_PASSWORD, ATUIN_KEY]"
    fi
    atuin sync

  if \
      ! [[ -s "$HOME/.cache/atuin/pidfile" ]] \
      || ! kill -0 "$(cat "$HOME/.cache/atuin/pidfile")"; then
      bash -c "(echo \$BASHPID > \"$HOME/.cache/atuin/pidfile\"; trap 'atuin sync; rm \"$HOME/.cache/atuin/pidfile\"' EXIT; sleep infinity) 1>>$HOME/.cache/atuin/logs 2>>$HOME/.cache/atuin/logs & disown"
  fi
}


__autoinit_atuin_describe() {

    cat - <<EOD
Atuin: magical shell history <https://atuin.sh/>

Environment variables:
    - atuin.sh variables:
        - ATUIN_USERNAME="${ATUIN_USERNAME}"
        - ATUIN_PASSWORD="${ATUIN_PASSWORD}"
        - ATUIN_KEY="${ATUIN_KEY}"
    - autoinit-atuin configuration:
      - AUTOINIT_ATUIN_AUTOCONFIGURE="${AUTOINIT_ATUIN_AUTOCONFIGURE}"
      - AUTOINIT_ATUIN_SYNC_ON_EXIT="${AUTOINIT_ATUIN_SYNC_ON_EXIT}"
      - AUTOINIT_NO_OVERWRITE_CONFIG="${AUTOINIT_NO_OVERWRITE_CONFIG}"
EOD
}

main() {
    ARG="$1"
    shift
    case "$ARG" in
        "init")
            __autoinit_atuin_init
            ;;

        "install")
            __autoinit_atuin_install
            ;;

        "is-active")
            __autoinit_atuin_is_active
            ;;

        "is-installed")
            __autoinit_atuin_is_installed
            ;;

        "is-ready")
            __autoinit_atuin_is_ready
            ;;

        "is-shadowed")
            __autoinit_atuin_is_shadowed
            ;;

        "autoload")
            __autoinit_atuin_autoload
            ;;

        "autorun")
            __autoinit_atuin_autorun "$@"
            exit $?
            ;;

        "configure")
            __autoinit_atuin_configure
            ;;

        "describe")
            __autoinit_atuin_describe
            ;;

        *)
            echo "Usage: $0 [init|install|is-active|is-installed]" 1>&2
            ;;
    esac

}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    # shellcheck disable=SC2068
    main $@
fi
